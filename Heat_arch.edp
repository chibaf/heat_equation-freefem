/****************************************************************************/
/* This file is part of FreeFEM.                                            */
/*                                                                          */
/* FreeFEM is free software: you can redistribute it and/or modify          */
/* it under the terms of the GNU Lesser General Public License as           */
/* published by the Free Software Foundation, either version 3 of           */
/* the License, or (at your option) any later version.                      */
/*                                                                          */
/* FreeFEM is distributed in the hope that it will be useful,               */
/* but WITHOUT ANY WARRANTY; without even the implied warranty of           */
/* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            */
/* GNU Lesser General Public License for more details.                      */
/*                                                                          */
/* You should have received a copy of the GNU Lesser General Public License */
/* along with FreeFEM. If not, see <http://www.gnu.org/licenses/>.          */
/****************************************************************************/
load "medit"

real R1=3;
real R2=5;
int nn=15;

// Parameters
bool withplot = 0;
real cpu1, cpu2;
func k = 1.8*(y < 0.5) + 0.2;
real kf = 1, ue = 20, T = 5, dt = 0.1;

// Mesh
//mesh Th = square(150, 50, [3*x, y]);
border g1(t=R1,R2){x=t;y=0;2;};
border g2(t=0,pi){x=R2*cos(t);y=R2*sin(t);3;};
border g3(t=-R2,-R1){x=t;y=0;4;};
border g4(t=0,pi){x=R1*cos(pi-t);y=R1*sin(pi-t);1;};

mesh Th=buildmesh(g1(nn)+g2(5*nn)+g3(nn)+g4(3*nn));
savemesh(Th,"poisson-freefem.msh");
plot(Th);

// Fespace
fespace Vh(Th, P1);
Vh u, uold, v, usave;

// Problem
int kk=0;
problem Heat(u, v, init=kk)
  = int2d(Th)(
      u*v/dt
    + k*(dx(u)*dx(v) + dy(u)*dy(v))
  )
  + int1d(Th, 2,4)(kf*v*u)
  - int1d(Th, 2,4)(kf*v*ue)
  - int2d(Th)(uold*v/dt)
  + on(1,3, u=30);

real cpu = clock();

// Initialization
u = 0;

// Basic time loop
for (real t = 0; t < T; t += dt) {
  uold = u;
  Heat;
  kk++;
  if (withplot) plot(u);
}

cpu1 = clock()-cpu;

plot(u);
usave[] = u[];

/// Optimized code
// Problem definition
varf vA(u, v)
  = int2d(Th)(
      u*v/dt
    + k*(dx(u)*dx(v) + dy(u)*dy(v))
    )
  + int1d(Th, 2,4)(kf*v*u)
  + on(1,3, u=30);
varf vB(u, v) = int2d(Th)(u*v/dt) ;
varf vRHS(u, v) = int1d(Th, 1, 3)(kf*v*ue);
varf vL(u, v) = on(1,3, u=30);

{
  cpu = clock();
  real[int] rhsbc = vL(0, Vh);
  real[int] rhs0 = vRHS(0, Vh);
  matrix A = vA(Vh, Vh, solver=sparsesolver);
  matrix B = vB(Vh, Vh);

  // Initialization
  u = 0;

  // Optimized time loop (speed of C language)
  for (real t = 0; t < T; t += dt) {
    real[int] b = B*u[];
    b += rhs0;
    b = rhsbc ? rhsbc : b;
    u[] = A^-1*b;
    if(withplot) plot(u);
  }
  cpu2 = clock() - cpu;
}

plot(u, cmm="u",fill=1,value=1,ps="heat_arch.eps");
cout << " cpu method 1 = " << cpu1 << " cpu method matrix = " << cpu2 << " ratio = " <<  cpu1/cpu2 << endl;
